
/**
 * Program purpose: Read the file input and behave accordingly. 
 *
 * @author (AFIZUDIN FIRDAUS)
 * @version (DATE: 21/9/2024)
 */
import java.util.ArrayList;
import java.util.Scanner;
import java.io.*;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;

public class Game
{   //declaration of attributes
    private String gameID;
    private String title;
    private String developer;
    private String yearReleased;
    private String genre;
    private String platform;
    private double price;
    //constructor without parameter
    public Game() {
        gameID = null;
        title = null;
        developer = null;
        yearReleased = null;
        genre = null;
        platform = null;
        price = 0.00;
    }
    //constructor with parameters
    public Game(String gameID, String title, String developer, String yearReleased, String genre, String platform, double price) {
        this.gameID = gameID;
        this.title = title;
        this.developer = developer;
        this.yearReleased = yearReleased;
        this.genre = genre;
        this.platform = platform;
        this.price = price;
    }
    //mutator and accessor methods
    public void setID(String gameID) {
        this.gameID = gameID;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public void setDev(String developer) {
        this.developer = developer;
    }

    public void setYear(String yearReleased) {
        this.yearReleased = yearReleased;
    }

    public void setGenre(String genre) {
        this.genre = genre;
    }

    public void setPlatform(String platform) {
        this.platform = platform;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public String getID() {
        return gameID;
    }

    public String getTitle() {
        return title;
    }

    public String getDev() {
        return developer;
    }

    public String getYear(){
        return yearReleased;
    }

    public String getGenre() {
        return genre;
    }

    public String getPlatform() {
        return platform;
    }

    public double getPrice() {
        return price;
    }
    //to string method to print according to the specified format
    @Override
    public String toString() {
        return "Game Information:\n" +
        "ID: " + getID() + "\n" +
        "Title: " + getTitle() + "\n" +
        "Developer: " + getDev() + "\n" +
        "Year Released: " + getYear() + "\n" +
        "Genre: " + getGenre() + "\n" +
        "Platform: " + getPlatform() + "\n" +
        "Price (RM): " + getPrice() + "\n";
    }
    //method to get the price from the user
    public static double getValidPrice() {
        Scanner scanner = new Scanner(System.in);
        double price = 0.00;
        while (true) {
            try {
                price = Double.parseDouble(JOptionPane.showInputDialog("Enter the price:"));
                if (price >= 0) // make sure the price is positive
                    break;
                else 
                    JOptionPane.showMessageDialog(null, "Please enter a positive price!", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid input! Please enter a valid price.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        scanner.close();//closing the scanner
        return price;
    }
    //main method
    public static void main(String[]args) {
        ArrayList<Game> gameList = new ArrayList<>();//creation of an arraylist
        Scanner scanner = new Scanner(System.in);//instantiation of the scanner
        //read the games.txt file
        try  (BufferedReader inputFile = new BufferedReader(new FileReader("games.txt"))){
            String inputData = null;

            while((inputData = inputFile.readLine()) != null) {
                StringTokenizer str = new StringTokenizer(inputData,";");
                String id = str.nextToken();
                String gameTitle = str.nextToken();
                String gameDev = str.nextToken();
                String year = str.nextToken();
                String gameGenre = str.nextToken();
                String gamePlatform = str.nextToken();
                double gamePrice = Double.parseDouble(str.nextToken());
                //create an object of the Game type with the stated input from the games.txt file
                Game game = new Game(id, gameTitle, gameDev, year, gameGenre, gamePlatform, gamePrice);
                gameList.add(game);//add the object to the arraylist
            }
            int count = 1;
            //while loop to prompt the user for the input
            while (count == 1)
            {
                System.out.println("Pick one of the following");
                System.out.println("1 to add a new game");
                System.out.println("2 to update game details");
                System.out.println("3 to remove a game");
                System.out.println("4 to Display game details and price");
                System.out.println("5 to Display games by a specific genre");
                System.out.println("any other number to exit");
                int choice = scanner.nextInt();//store the input
                //switch statement so the program can behave accordingly
                switch(choice) {
                    case 1:
                        boolean found = false;
                        String newTitle = null;
                        String newDev = null;
                        String newYear = null;
                        String newGenre = null;
                        String newPlatform = null;
                        double newPrice = 0.00;
                        String id = JOptionPane.showInputDialog("Enter the ID:");//prompt the user for the game ID
                        //check if the game id entered already exists
                        for(Game game : gameList) {
                            if(game.getID().equalsIgnoreCase(id)) {
                                found = true;
                                break;
                            }
                        }

                        if(found) //if game id already exists 
                            JOptionPane.showMessageDialog(null, "New ID already exists", "Error", JOptionPane.ERROR_MESSAGE);
                        else //if game id does not exists
                        {   //prompt the user for the details
                            newTitle = JOptionPane.showInputDialog("Enter the game title:");
                            newDev = JOptionPane.showInputDialog("Enter the developer:");
                            newYear = JOptionPane.showInputDialog("Enter the year it was released:");
                            newGenre = JOptionPane.showInputDialog("Enter the genre:");
                            newPlatform = JOptionPane.showInputDialog("Enter the platform:");
                            newPrice = Game.getValidPrice();
                            //add the new game in the arraylist
                            gameList.add(new Game(id, newTitle, newDev, newYear, newGenre, newPlatform, newPrice));
                        }
                        break;
                    case 2:
                        int itemIndex = 0;
                        found = false;
                        Game selectedGame = null;
                        id = JOptionPane.showInputDialog("Enter the ID:");//prompt the user for the game id
                        //check if the game id already exists
                        for(Game game : gameList) {
                            if(game.getID().equalsIgnoreCase(id)) {
                                found = true;
                                selectedGame = game;//store the object if it already exists
                                break;
                            }
                        }

                        if(!found) //if game id already exists 
                            JOptionPane.showMessageDialog(null, "Game ID does not exist", "Error", JOptionPane.ERROR_MESSAGE);
                        //submenu to prompt the user to make a decision
                        else {
                            System.out.println("Pick one of the following:");
                            System.out.println("Enter a to edit the title:");
                            System.out.println("Enter b to edit the developer:");
                            System.out.println("Enter c to edit the year released:");
                            System.out.println("Enter d to edit the genre:");
                            System.out.println("Enter e to edit the platform:");
                            System.out.println("Enter f to edit the price:");
                            System.out.println("Enter any other key to exit/cancel");
                            char subChoice = scanner.next().charAt(0);//store the input
                            subChoice = Character.toLowerCase(subChoice);//ensure that the input is lowercase
                            //switch statement so the program can behave accordingly
                            switch(subChoice){
                                case 'a':
                                    newTitle = JOptionPane.showInputDialog("Enter the new title:");//prompt for the new title
                                    selectedGame.setTitle(newTitle);//change the title of the game
                                    break;
                                case 'b':
                                    newDev = JOptionPane.showInputDialog("Enter the new developer:");//prompt the user for the new developer
                                    selectedGame.setDev(newDev);//change the developer of the game
                                    break;
                                case 'c':
                                    newYear = JOptionPane.showInputDialog("Enter the new year released:");//prompt the user for the new year released
                                    selectedGame.setYear(newYear);//change the year released of the game
                                    break;
                                case 'd':
                                    newGenre = JOptionPane.showInputDialog("Enter the new genre:");//prompt the user for the new genre
                                    selectedGame.setGenre(newGenre);//change the genre of the game
                                    break;
                                case 'e':
                                    newPlatform = JOptionPane.showInputDialog("Enter the new platform:");//prompt the user for the new platform
                                    selectedGame.setPlatform(newPlatform);//change the platform of the game
                                    break;
                                case 'f':
                                    newPrice = Game.getValidPrice();//prompt the user for the new price
                                    selectedGame.setPrice(newPrice);//change the price of the game
                                    break;
                                default:
                                    // Exit or cancel
                                    break;
                            }
                        }
                        break;
                    case 3:
                        found = false;
                        selectedGame = null;
                        id = JOptionPane.showInputDialog("Enter the ID:");
                        //check if the id already exists
                        for(Game game : gameList) {
                            if(game.getID().equalsIgnoreCase(id)) {
                                found = true;
                                selectedGame = game;
                                break;
                            }
                        }
                        //if it does exists, remove the game from the arraylist
                        if(found)
                            gameList.remove(selectedGame);
                        else
                            JOptionPane.showMessageDialog(null,"Game ID does not exists","Error", JOptionPane.ERROR_MESSAGE);
                        break;
                    case 4:
                        for (Game game : gameList) {
                            System.out.println(game);
                        }
                        break;
                    case 5:
                        String genreInput = JOptionPane.showInputDialog("Enter the genre:");//prompt the user for the genre
                        found = false;
                        //filter the game according to the stated genre
                        for (Game game : gameList) {
                            if(game.getGenre().equalsIgnoreCase(genreInput)) {
                                System.out.println(game);
                                found = true;
                            }
                        }
                        if(!found)//if no game is within the specified genre
                            JOptionPane.showMessageDialog(null, "No games for this specific genre", "Info", JOptionPane.ERROR_MESSAGE);
                        break;
                    default:
                        count = 0;//initialize count to 0 to break out of the while loop
                        break;

                }
            }
        } catch(FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Cannot read data", "ERROR", JOptionPane.ERROR_MESSAGE);//if file cannot be read
        } catch(Exception iae) {
            JOptionPane.showMessageDialog(null, "Something went wrong!", "ERROR", JOptionPane.ERROR_MESSAGE);//if any unexpected error occurs
        }
        scanner.close();//closing the scanner
        System.exit(0);//exit the program
    }
}
